using AutoMapper;
using EntityFramework.Extensions;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Objects;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web.Mvc;
using TobyStudentManagementSystem.Models;

namespace TobyStudentManagementSystem.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            ViewBag.Message = "Scheduler";
            try
            {
                InitializeDB();
                AutoGeneratedFixedEvents();
                return View();
            }
            catch { return PartialView("Error"); }
        }

        public JsonResult LoadingEventSource()
        {
            List<EventModel> eventModels;
            Guid id = Guid.Parse((string)Session["student"]);

            try
            {
                using (var context = new TobyDBContext())
                {
                    if (Session["student"] != null)
                    {
                        eventModels = context.EventModels.Where(eventModel => eventModel.StudentId == id).ToList();
                    }
                    else
                    {
                        return Json(null);
                    }
                }
                return Json(eventModels.Select(models => new
                    {
                        id = models.Id.ToString(),
                        title = models.EventTitle,
                        start = models.StartTime.ToString("s"),
                        end = models.EndTime.ToString("s"),
                        allDay = models.IsAllDay,
                        isFixed = models.IsFixed,
                        backgroundColor = models.Color,
                        teacherId = models.TeacherId,
                        worktypeId = models.WorkTypeId
                    }).ToArray(), JsonRequestBehavior.AllowGet);
            }
            catch { return Json(null); }
        }

        public JsonResult SavedEvent(string eventTitle, string startTime, string endTime, bool isAllDay, bool isFixed)
        {
            try
            {
                if (Session["student"] == null)
                {
                    return Json(false);
                }

                EventModel eventModel = new EventModel
                {
                    EndTime = DateTime.Parse(endTime),
                    StartTime = DateTime.Parse(startTime),
                    EventTitle = eventTitle,
                    IsAllDay = isAllDay,
                    IsFixed = isFixed,
                    Color = isFixed ? "green" : "red"
                };
                Guid id = Guid.Parse((string)Session["student"]);
                using (var context = new TobyDBContext())
                {
                    eventModel.StudentId = id;
                    context.EventModels.Add(eventModel);
                    context.SaveChanges();
                }
                return Json(eventModel.Id);
            }
            catch { return Json(false); }
        }

        public JsonResult SavedEvents(EventJsonModel jsonModel)
        {
            DateTime start, end, temp;
            EventModel eventModel;

            try
            {
                if (jsonModel.studentIds == null)
                {
                    throw new Exception();
                }

                if (DateTime.TryParse(jsonModel.startTime, out start) && DateTime.TryParse(jsonModel.endTime, out end))
                {
                    if (start > end)
                    {
                        temp = start;
                        start = end;
                        end = temp;
                    }
                }
                else
                {
                    throw new Exception();
                }

                using (var context = new TobyDBContext())
                {
                    jsonModel.studentIds.ForEach(id =>
                        {
                            eventModel = new EventModel
                            {
                                EventTitle = jsonModel.eventTile,
                                StartTime = start,
                                EndTime = end,
                                StudentId = id,
                                TeacherId = jsonModel.teacherId,
                                WorkTypeId = jsonModel.workTypeId,
                                Color = "red",
                                IsFixed = false,
                                IsAllDay = false
                            };
                            context.EventModels.Add(eventModel);
                        });

                    context.SaveChanges();
                }

                return Json(true);
            }
            catch
            {
                return Json(false);
            }
        }

        public void UpdatedEvent(Guid id, string startTime, string endTime, bool isAllDay)
        {
            try
            {
                using (var context = new TobyDBContext())
                {
                    context.EventModels.Update(events => events.Id == id, eventTitles => new EventModel
                    {
                        StartTime = DateTime.Parse(startTime),
                        EndTime = DateTime.Parse(endTime),
                        IsAllDay = isAllDay
                    });
                }
            }
            catch { }
        }

        public void UpdatedTitle(Guid id, Guid teacherId, int workTypeId, string eventTitle, string theColor, bool isFixed)
        {
            try
            {
                using (var context = new TobyDBContext())
                {
                    context.EventModels.Update(events => events.Id == id, eventTitles => new EventModel
                    {
                        EventTitle = eventTitle,
                        Color = theColor,
                        IsFixed = isFixed,
                        TeacherId = teacherId,
                        WorkTypeId = workTypeId
                    });
                }
            }
            catch { }
        }

        public void DeletedEvent(Guid id)
        {
            try
            {
                using (var context = new TobyDBContext())
                {
                    context.EventModels.Delete(events => events.Id == id);
                }
            }
            catch { }
        }

        public ActionResult EditedEvent(string eventId, string eventTitle, bool isFixed)
        {
            EventViewModel model = new EventViewModel { EventId = eventId, Title = eventTitle, IsFixed = isFixed };
            return PartialView("EditedEvent", model);
        }

        public JsonResult SearchStudents(string studentName)
        {
            StudentModel student;

            try
            {
                using (var context = new TobyDBContext())
                {
                    if (studentName != null && studentName != "")
                    {
                        student = context.StudentModels.Where(students => students.Name == studentName
                            || students.EnglishName == studentName).First();

                    }
                    else
                    {
                        throw new Exception();
                    }
                }

                Session["student"] = student.Id.ToString();

                return Json(student.Id);
            }
            catch
            {
                return Json(false);
            }
        }

        public JsonResult GeneratedFixedEvents()
        {
            Mapper.Reset();
            Mapper.CreateMap<EventModel, EventModel>().ForMember(dest => dest.Id, opt => opt.Ignore());
            List<EventModel> events;
            EventModel eventModel;
            DateTime startTime, endTime;
            try
            {
                if (Session["student"] != null)
                {
                    using (var context = new TobyDBContext())
                    {
                        Guid id = Guid.Parse((string)Session["student"]);
                        events = context.EventModels.Where(models => models.IsFixed && models.StudentId == id).ToList();
                        foreach (EventModel model in events)
                        {
                            startTime = model.StartTime.AddDays(7);
                            endTime = model.EndTime.AddDays(7);
                            if (!CheckEventIsExist(startTime, endTime, model.StudentId))
                            {
                                context.EventModels.Attach(model);
                                eventModel = Mapper.Map<EventModel, EventModel>(model);
                                eventModel.StartTime = startTime;
                                eventModel.EndTime = endTime;
                                eventModel.Color = "green";
                                context.EventModels.Add(eventModel);
                                model.IsFixed = false;
                                model.Color = "red";
                            }
                        }
                        context.SaveChanges();
                    }
                }
                else
                {
                    return Json(false);
                }

                return Json(true);
            }
            catch
            {
                return Json(false);
            }
        }

        public ActionResult DispatchedEvents()
        {
            return PartialView("DispatchedEvent");
        }

        public ActionResult GetDispatchedStudents(string startTime, string endTime)
        {
            DateTime start, end, temp;
            List<StudentViewModel> studentModels;
            List<EventModel> eventModels;
            List<StudentModel> students;
            try
            {
                if (DateTime.TryParse(startTime, out start) && DateTime.TryParse(endTime, out end))
                {
                    if (start > end)
                    {
                        temp = start;
                        start = end;
                        end = temp;
                    }
                }
                else
                {
                    return PartialView("Error");
                }

                using (var context = new TobyDBContext())
                {
                    students = context.StudentModels.OrderBy(s=> s.TobyClassId).ToList();

                    eventModels = context.EventModels.Where(events =>
                        (start > events.StartTime && start < events.EndTime)
                        || (end > events.StartTime && end < events.EndTime)
                        || (start <= events.StartTime && end >= events.EndTime)).ToList();
                    studentModels = new List<StudentViewModel>();
                    students.ForEach(student =>
                    {
                        var name = String.Format("{0}({1})", student.Name, student.EnglishName);
                        if (!eventModels.Any(studentId => student.Id == studentId.StudentId))
                        {
                            studentModels.Add(new StudentViewModel { StudentId = student.Id.ToString(), StudentName = name });
                        }
                    });
                }
                return PartialView("DispatchedStudent", studentModels);
            }
            catch
            {
                return PartialView("Error");
            }
        }

        public JsonResult RemovedStudent(string studentId)
        {
            Guid id;
            try
            {
                if (studentId == null || studentId == "" || !Guid.TryParse(studentId, out id))
                {
                    throw new Exception();
                }

                using (var context = new TobyDBContext())
                {
                    context.StudentModels.Delete(student => student.Id == id);
                }

                return Json(true);
            }
            catch
            {
                return Json(false);
            }
        }

        public JsonResult GetTeacherList()
        {
            List<TeacherModel> teachers;
            try
            {
                using (var context = new TobyDBContext())
                {
                    teachers = context.TeacherModels.ToList();
                }

                return Json(teachers.Select(models => new
                {
                    id = models.Id,
                    name = String.Format("{0}({1})",
                        models.Name, models.EnglishName)
                }));
            }
            catch
            {
                this.Response.StatusCode = 500;

                return Json(null);
            }
        }

        public JsonResult GetWorkTypeList()
        {
            List<WorkTypeLookupTable> workTyepList;
            try
            {
                using (var context = new TobyDBContext())
                {
                    workTyepList = context.WorkTypeLookupTable.ToList();
                }

                return Json(workTyepList.Select(models => new
                {
                    type_id = models.Id,
                    type_name = models.TypeName
                }));
            }
            catch
            {
                this.Response.StatusCode = 500;

                return Json(null);
            }
        }

        [HttpGet]
        public ActionResult GetSchedule()
        {
            return PartialView("DutyWorkDetail");
        }

        public ActionResult GetDutyWorks(string dutyDate, string teacherId)
        {
            DateTime date;
            Guid id = Guid.Empty;
            List<EventModel> eventModels;

            try
            {
                if (!DateTime.TryParse(dutyDate, out date) || !Guid.TryParse(teacherId, out id))
                {
                    throw new Exception();
                }

                using (var context = new TobyDBContext())
                {
                    eventModels = (from eventModel in context.EventModels
                                   where eventModel.TeacherId == id && EntityFunctions.DiffDays(eventModel.StartTime, date) == 0
                                   select eventModel).Include(m => m.Student).Include(m => m.Teacher)
                                   .OrderBy(m => m.StudentId).ToList();
                }

                return PartialView("DutyWorks", eventModels);
            }
            catch
            {
                return PartialView("Error");
            }
        }

        #region private method

        private void InitializeDB()
        {
            Database.SetInitializer(new DbContextInitializer());

            using (var context = new TobyDBContext())
            {
                context.Database.CreateIfNotExists();
            }

        }

        private void AutoGeneratedFixedEvents()
        {
            Mapper.Reset();
            Mapper.CreateMap<EventModel, EventModel>().ForMember(dest => dest.Id, opt => opt.Ignore());
            List<EventModel> events;
            EventModel eventModel;
            List<StudentModel> students;
            DateTime currentDate = DateTime.Today, startTime, endTime;

            using (var context = new TobyDBContext())
            {
                students = context.StudentModels.ToList();
                students.ForEach(student =>
                {
                    events = context.EventModels.Where(models => models.IsFixed && models.StudentId == student.Id && models.StartTime < currentDate).ToList();
                    foreach (EventModel model in events)
                    {
                        startTime = model.StartTime.AddDays(7);
                        endTime = model.EndTime.AddDays(7);
                        if (!CheckEventIsExist(startTime, endTime, model.StudentId))
                        {
                            context.EventModels.Attach(model);
                            eventModel = Mapper.Map<EventModel, EventModel>(model);
                            eventModel.StartTime = startTime;
                            eventModel.EndTime = endTime;
                            eventModel.Color = "green";
                            context.EventModels.Add(eventModel);
                            model.IsFixed = false;
                            model.Color = "red";
                        }
                    }
                });
                context.SaveChanges();
            }

        }

        private bool CheckEventIsExist(DateTime start, DateTime end, Guid studentId)
        {
            List<EventModel> eventModels;
            using (var context = new TobyDBContext())
            {
                eventModels = context.EventModels.Where(events =>
                           events.StudentId == studentId &&
                    ((start > events.StartTime && start < events.EndTime)
                    || (end > events.StartTime && end < events.EndTime)
                    || (start <= events.StartTime && end >= events.EndTime))
                           ).ToList();
            }
            if (eventModels != null && eventModels.Count != 0)
            {
                return true;
            }
            return false;
        }

        #endregion
    }
}
